{"name":"Swift Tutorial for UITableViews and Swifter","tagline":"Build a Simple Twitter iOS Application with Swifter","body":"It's only been a couple weeks, and already developers are diving in and creating cool things with Swift. We're really excited to be using Swift ourselves, and we've been working hard to build applications that showcase some of the new functionality and paradigms that the swift language brings to the app world.\r\n\r\nOur first swift tutorial will be focused on using the Swifter framework to connect to twitter and authorize a user in iOS and then display the latest tweets in a UITableView. If you're not already familiar with the latest apple releases, there are [many](https://developer.apple.com/swift/) [great](http://www.learnswift.tips/) [resources](https://www.youtube.com/user/nkhan6/videos) for learning xcode 6 and the swift language. We're going to start off these posts assuming you know your way around, but even if you don't know swift or xcode 6, you will get enough of a primer from our tutorial that you should be able to build this app from scratch or  [download the source](https://github.com/swiftcast/Swift-UITableView-with-Swifter-Example) and understand it.\r\n\r\n## Create a new iOS Project in Xcode 6\r\n\r\n<div class=\"message\">\r\n\tWe have some prerequisites for this application. We will be building with Xcode 6 and building for iOS 8 in simulator. This should be zero configuration if you've downloaded the beta or newer of xcode from the apple developer center.\r\n</div>\r\n\r\nSelect the \"Single View Application\" under the iOS > Application menu on the left side of the window.\r\n\r\n![image](http://i.cubeupload.com/P7Z8We.png)\r\n\r\nFill in your app details, we're choosing to name our app \"Swifter Auth Example\" and to keep things simple, we're going to build for iPhone. You will obviously want to choose swift as your language.\r\n\r\n![image](http://i.cubeupload.com/q9P90Q.png)\r\n\r\n## Add the Swifter Framework to your Application\r\n\r\nTo use the Swifter framework in our application, we need to [download the Swifter  source](https://github.com/mattdonnelly/Swifter) and drag the xcode project into our own.\r\n\r\n![image](http://i.cubeupload.com/cbscEp.png)\r\n\r\nSelect your main (parent) xcode project and on the settings page scroll near the bottom and click + under \"Linked Frameworks and Libraries.\" You should see `SwifteriOS.framework` listed at the top of the modal window, which we can select and add.\r\n\r\n![image](http://i.cubeupload.com/gYI27N.png)\r\n\r\nStatus should be set to `Required` for this framework. While we're on this page, lets lock down our device orientation to portrait, and make sure the deployment target is set to iOS 8.\r\n\r\n![image](http://i.cubeupload.com/2glDCW.png)\r\n\r\n## Create Storyboards Views and use Autolayout\r\n\r\nSince we're mainly focused on creating for the iPhone, let's target the portrait mode by selecting compact width and regular height from our autolayout target guide.\r\n\r\n![image](http://i.cubeupload.com/0OJFfP.png)\r\n\r\nNext we'll want to add some image assets to our project. We will add the image source for a twitter button we will create on our main Storyboard view.\r\n\r\n![image](http://i.cubeupload.com/pIWGG5.png)\r\n\r\nNow that we have the image for our button, let's go add an actual button component to our view. Clear out the default text and set the image field to your twitter button.\r\n\r\n![image](http://i.cubeupload.com/roQZhA.png)\r\n\r\nYour button should default to the width of the image and you can drag the image to center it on the page. You can also do this with autolayout constraints by selecting the button and selecting the alignment constraints menu and selecting to center horizontally/vertically in container.\r\n\r\n![image](http://i.cubeupload.com/0mbggL.png)\r\n\r\nLets now create a custom action for when this button is pressed. Select the assistant editor (tux button in the top right) and ctrl+drag the button onto your ViewController.swift file.\r\n\r\n![image](http://i.cubeupload.com/0jsNmj.png)\r\n\r\nMake sure to select the action in the connection menu. We will call ours `doTwitterLogin`\r\n\r\n![image](http://i.cubeupload.com/PqPdvJ.png)\r\n\r\nLastly, we added a second view controller with a table view dropped in. To keep things organized, we created a `Controllers` group in the project, renamed our `ViewController.swift` to `AuthView.swift` and dropped it into the controllers group. You should then, also make an additional Swift controller (you can clone the original) and assign each of your two views from the story board to the AuthView and RecentTweets view respectively.\r\n\r\n![image](http://i.cubeupload.com/cq0fVv.png)\r\n\r\n\r\n## Done with Storyboards, time for Swift Code!\r\n\r\nRather than fragmenting code with no context of where those snippets really belong, we like to keep our controllers light enough and well commented so you can simply read the code and hopefully understand what is going on.\r\n\r\n### AuthView.swift\r\n\r\n```\r\n// We need to import our frameworks used here\r\n// UIKit is our base for interacting with nibs, storyboards, and the app as a whole\r\n// The Accounts framework gives us access to accounts authed in the phone's settings\r\n// The Social framework allows us to interact with twitter in a limited way\r\n// The SwifteriOS framework gives us more granular control for dealing with twitter\r\nimport UIKit\r\nimport Accounts\r\nimport Social\r\nimport SwifteriOS\r\n\r\n// our AuthView is assigned to the first UIViewController in the Main.storyboard\r\nclass AuthView: UIViewController\r\n{\r\n  // Default to using the iOS account framework for handling twitter auth\r\n  let useACAccount = true\r\n\r\n  // Our custom button action\r\n  @IBAction func doTwitterLogin(sender : AnyObject)\r\n  {\r\n    // All errors should be caught and alert the user with user friendly text\r\n    let failureHandler: ((NSError) -> Void) = {\r\n      error in\r\n\r\n      self.alert(error.localizedDescription)\r\n    }\r\n\r\n    // Use the accounts already stored in the phone's settings?\r\n    if useACAccount\r\n    {\r\n      let accountStore = ACAccountStore()\r\n      let accountType = accountStore.accountTypeWithAccountTypeIdentifier(ACAccountTypeIdentifierTwitter)\r\n\r\n      // Prompt the user for permission to their twitter account stored in the phone's settings\r\n      accountStore.requestAccessToAccountsWithType(accountType) {\r\n        granted, error in\r\n\r\n        if granted\r\n        {\r\n          let twitterAccounts = accountStore.accountsWithAccountType(accountType)\r\n\r\n          // We're thinking, why can't this be more dry? This is the only control flow where we beg for more\r\n          // Would love to check: if twitterAccounts && twitterAccounts.count > 0\r\n          if twitterAccounts\r\n          {\r\n            if twitterAccounts.count == 0\r\n            {\r\n              self.alert(\"There are no Twitter accounts configured. You can add or create a Twitter account in Settings.\")\r\n            }\r\n            else\r\n            {\r\n              let twitterAccount = twitterAccounts[0] as ACAccount\r\n              let swifter = Swifter(account: twitterAccount)\r\n              self.fetchTwitterHomeStream(swifter)\r\n            }\r\n          }\r\n          else {\r\n            self.alert(\"There are no Twitter accounts configured. You can add or create a Twitter account in Settings.\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Let's do it the more typical way, by instantiating Swifter with our custom app credentials\r\n    else\r\n    {\r\n      let swifter = Swifter(\r\n        consumerKey: \"RErEmzj7ijDkJr60ayE2gjSHT\",\r\n        consumerSecret: \"SbS0CHk11oJdALARa7NDik0nty4pXvAxdt7aj0R5y1gNzWaNEx\"\r\n      )\r\n\r\n      swifter.authorizeWithCallbackURL(\r\n        NSURL(string: \"swifter://success\"),\r\n        success: {\r\n          accessToken, response in\r\n\r\n          self.alert(\"Successfully authorized with App API\")\r\n          self.fetchTwitterHomeStream(swifter)\r\n        },\r\n        failure: failureHandler\r\n      )\r\n    }\r\n  }\r\n\r\n  override func viewDidLoad()\r\n  {\r\n    super.viewDidLoad()\r\n  }\r\n\r\n  override func didReceiveMemoryWarning()\r\n  {\r\n    super.didReceiveMemoryWarning()\r\n  }\r\n\r\n  // Keeping things DRY by creating a simple alert method that we can reuse for generic errors\r\n  func alert(message: String)\r\n  {\r\n    // This is the iOS8 way of doing alerts. For older versions, look into UIAlertView\r\n    var alert = UIAlertController(\r\n      title: nil,\r\n      message: message,\r\n      preferredStyle: UIAlertControllerStyle.Alert\r\n    )\r\n    alert.addAction(UIAlertAction(title: \"Ok\", style: UIAlertActionStyle.Default, handler: nil))\r\n    self.presentViewController(alert, animated: true, completion: nil)\r\n  }\r\n\r\n  // More DRY code, fetch the users home timeline if all went well\r\n  func fetchTwitterHomeStream(swifter: Swifter)\r\n  {\r\n    let failureHandler: ((NSError) -> Void) = {\r\n      error in\r\n      self.alert(error.localizedDescription)\r\n    }\r\n\r\n    swifter.getStatusesHomeTimelineWithCount(\r\n      20,\r\n      sinceID: nil,\r\n      maxID: nil,\r\n      trimUser: true,\r\n      contributorDetails: false,\r\n      includeEntities: true,\r\n      success: {\r\n        statuses, response in\r\n\r\n        // We loaded the stream just fine, so lets create and push the table view\r\n        let recentTweets = self.storyboard.instantiateViewControllerWithIdentifier(\"RecentTweets\") as RecentTweets\r\n        recentTweets.recentTweets = statuses as NSArray\r\n        self.presentViewController(recentTweets, animated: true, completion: nil)\r\n      },\r\n      failure: failureHandler\r\n    )\r\n\r\n  }\r\n}\r\n```\r\n\r\n### RecentTweets.swift\r\n\r\n```\r\nimport UIKit\r\n\r\n// RecentTweets inherits from UIViewController and implements the UITableViewDelegate and UITableViewDataSource protocols\r\nclass RecentTweets: UIViewController, UITableViewDelegate, UITableViewDataSource\r\n{\r\n  // Q: Why NSArray vs the new array syntax?\r\n  // A: Most of us are former Objc devs, and sometimes it helps mentally to be more explicit\r\n  var recentTweets : NSArray = []\r\n\r\n  // You ctrl+dragged this outlet in from your storyboard right?\r\n  @IBOutlet var tableView : UITableView\r\n\r\n  override func viewDidLoad()\r\n  {\r\n    super.viewDidLoad()\r\n  }\r\n\r\n  override func didReceiveMemoryWarning()\r\n  {\r\n    super.didReceiveMemoryWarning()\r\n  }\r\n\r\n  // As defined in the protocol, we need to provide the number of rows in this table\r\n  func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -> Int\r\n  {\r\n    return recentTweets.count\r\n  }\r\n\r\n  // Another protocol method, allowing us to control the data created in each cell\r\n  // Note that UITableView has a ! at the end\r\n  func tableView(tableView: UITableView!, cellForRowAtIndexPath indexPath: NSIndexPath!) -> UITableViewCell!\r\n  {\r\n    // Grab the data in the recentTweets array based on the index of the cell\r\n    // Tell the program what type of data it is so that we can drill into this generic object\r\n    let data = recentTweets[indexPath.row] as? Dictionary<String, AnyObject>\r\n    let cell = UITableViewCell(style: .Subtitle, reuseIdentifier: nil)\r\n\r\n    cell.textLabel.text = data![\"text\"]? as String\r\n\r\n    return cell\r\n  }\r\n}\r\n```\r\n\r\n## Build your iOS Twitter App!\r\n- Does it run?\r\n- Did you run into problems?\r\n- What modifications have you tried?\r\n- See any typos in our code or comments?\r\n- Anything you need more clarification on?\r\n\r\nLet us know in the comments! We hope that you built your first Swifter based app with success, and look forward to your feedback!","google":"51691217","note":"Don't delete this file! It's used internally to help with page regeneration."}